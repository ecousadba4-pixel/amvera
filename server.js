const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const cookieParser = require('cookie-parser');
const rateLimit = require('express-rate-limit');
const { Pool } = require('pg');
const crypto = require('crypto'); // –î–ª—è SHA-256
const path = require('path');

const app = express();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const PORT = Number(process.env.PORT) || 3000;
const NODE_ENV = process.env.NODE_ENV || 'production';
const DATABASE_URL = process.env.DATABASE_URL;
const DEFAULT_BACKEND_HOST = 'u4s-loyalty-karinausadba.amvera.io';
const AUTH_DISABLED = String(process.env.AUTH_DISABLED || '').toLowerCase() === 'true';

const escapeRegex = (value = '') => value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
const createWildcardRegex = (pattern) =>
  new RegExp(`^${pattern.split('*').map(escapeRegex).join('.*')}$`, 'i');

const normalizeOriginsList = (raw) =>
  raw
    .split(',')
    .map((item) => item.trim())
    .filter(Boolean);

const DEFAULT_ALLOWED_ORIGINS = [
  'https://usadba4.ru',
  'https://www.usadba4.ru',
  `https://${DEFAULT_BACKEND_HOST}`,
  'http://localhost',
  'http://localhost:3000',
  'http://localhost:5173',
  'http://127.0.0.1',
  'http://127.0.0.1:3000'
];

const configuredOrigins = process.env.ALLOWED_ORIGINS
  ? normalizeOriginsList(process.env.ALLOWED_ORIGINS)
  : [];

const UNIQUE_ALLOWED_ORIGINS = Array.from(
  new Set([...DEFAULT_ALLOWED_ORIGINS, ...configuredOrigins])
);

const EXACT_ALLOWED_ORIGINS = new Set(
  UNIQUE_ALLOWED_ORIGINS.filter((origin) => !origin.includes('*'))
);

const WILDCARD_ORIGINS = UNIQUE_ALLOWED_ORIGINS.filter((origin) =>
  origin.includes('*')
).map(createWildcardRegex);

const isOriginAllowed = (origin) => {
  if (!origin) {
    return true;
  }

  if (EXACT_ALLOWED_ORIGINS.has(origin)) {
    return true;
  }

  return WILDCARD_ORIGINS.some((regex) => regex.test(origin));
};
const COOKIE_SECRET = process.env.COOKIE_SECRET || 'default_cookie_secret';
const RATE_LIMIT_WINDOW = Number(process.env.RATE_LIMIT_WINDOW) || 15 * 60 * 1000;
const RATE_LIMIT_MAX = Number(process.env.RATE_LIMIT_MAX) || 100;
const LOG_LEVEL = process.env.LOG_LEVEL || 'info';
const STATIC_DIR = path.join(__dirname, 'public');

const normalizeHash = (hashValue) => {
  if (typeof hashValue !== 'string') {
    return undefined;
  }

  let normalized = hashValue.trim().toLowerCase().replace(/\s+/g, '');

  normalized = normalized.replace(/^(sha-?256[:=]?)/, '');
  normalized = normalized.replace(/^0x/, '');

  if (!/^[a-f0-9]{64}$/i.test(normalized)) {
    return undefined;
  }

  return normalized;
};

const PASSWORD_HASH = normalizeHash(process.env.PASSWORD_HASH);

if (!DATABASE_URL) {
  console.error('‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–∞. –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
  process.exit(1);
}

if (!AUTH_DISABLED && !PASSWORD_HASH) {
  console.error(
    '‚ùå –ù–µ –∑–∞–¥–∞–Ω PASSWORD_HASH –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PASSWORD_HASH –∏–ª–∏ AUTH_DISABLED=true.'
  );
  process.exit(1);
}

// Trust proxy –¥–ª—è Amvera/cloud
app.set('trust proxy', 1);

// Middleware
app.use(
  helmet({
    crossOriginResourcePolicy: { policy: 'cross-origin' }
  })
);
app.use(cookieParser(COOKIE_SECRET));
app.use(express.json({ limit: '1mb' }));
app.use(express.urlencoded({ extended: false }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–µ—Ç—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use('/app', express.static(STATIC_DIR));
app.get('/app', (req, res) => {
  res.sendFile(path.join(STATIC_DIR, 'index.html'));
});

// Rate limiting
const apiRateLimiter = rateLimit({
  windowMs: RATE_LIMIT_WINDOW,
  max: RATE_LIMIT_MAX,
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    success: false,
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
  }
});
app.use(apiRateLimiter);

// CORS
app.use(cors({
  origin: (origin, callback) => {
    if (isOriginAllowed(origin)) {
      callback(null, true);
    } else {
      callback(new Error('Origin not allowed by CORS policy'), false);
    }
  },
  methods: ['GET', 'POST', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
const PG_POOL_MAX = Number(process.env.PG_POOL_MAX) || 10;
const PG_IDLE_TIMEOUT = Number(process.env.PG_IDLE_TIMEOUT) || 30_000;
const PG_CONNECTION_TIMEOUT = Number(process.env.PG_CONNECTION_TIMEOUT) || 5_000;
const PG_SSL_REJECT_UNAUTHORIZED = String(process.env.PG_SSL_REJECT_UNAUTHORIZED || '').toLowerCase() !== 'false';

const pool = new Pool({
  connectionString: DATABASE_URL,
  max: PG_POOL_MAX,
  idleTimeoutMillis: PG_IDLE_TIMEOUT,
  connectionTimeoutMillis: PG_CONNECTION_TIMEOUT,
  ssl: NODE_ENV === 'production' ? { rejectUnauthorized: PG_SSL_REJECT_UNAUTHORIZED } : false
});

pool.on('error', (error) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–ª–∞ –ë–î:', error.message);
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è SHA-256
function sha256(str) {
  return crypto.createHash('sha256').update(str, 'utf8').digest('hex');
}

function normalizeCheckinDate(dateValue) {
  if (!dateValue) {
    return null;
  }

  const raw = String(dateValue).trim();

  if (!raw) {
    return null;
  }

  if (/^\d{4}-\d{2}-\d{2}$/.test(raw)) {
    return raw;
  }

  if (/^\d{2}\.\d{2}\.\d{4}$/.test(raw)) {
    const [day, month, year] = raw.split('.');
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  if (/^\d{2}-\d{2}-\d{4}$/.test(raw)) {
    const [day, month, year] = raw.split('-');
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  if (/^\d{4}\.\d{2}\.\d{2}$/.test(raw)) {
    const [year, month, day] = raw.split('.');
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
  }

  return null;
}

// === –≠–ù–î–ü–û–ò–ù–¢–´ ===

// Health-check
app.get('/health', async (req, res) => {
  try {
    await pool.query('SELECT 1');
    res.json({
      status: '‚úÖ OK',
      database: 'Connected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      status: '‚ùå Error',
      database: 'Disconnected',
      error: NODE_ENV === 'development' ? error.message : 'DB connection error'
    });
  }
});

app.get('/api/config', (req, res) => {
  res.json({
    authDisabled: AUTH_DISABLED
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.json({
    message: 'üöÄ Hotel Guests API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    status: 'OK',
    database: 'Neon PostgreSQL',
    build: process.env.BUILD_VERSION || 'dev'
  });
});

// üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (–Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
app.post('/api/auth', (req, res) => {
  const { password } = req.body;

  if (AUTH_DISABLED) {
    return res.status(200).json({
      success: true,
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    });
  }

  if (!password || typeof password !== 'string') {
    return res.status(400).json({
      success: false,
      message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    });
  }

  const rawPassword = String(password);
  const trimmedPassword = rawPassword.trim();

  if (!trimmedPassword) {
    return res.status(400).json({
      success: false,
      message: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    });
  }

  const candidatePasswords = Array.from(
    new Set(
      [rawPassword, trimmedPassword].filter(pw => typeof pw === 'string' && pw.length > 0)
    )
  );
  const candidateHashes = candidatePasswords.map(pw => sha256(pw));

  if (!PASSWORD_HASH) {
    console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω PASSWORD_HASH –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è');
    return res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }

  const hashMatches = candidateHashes
    .map((hash) => normalizeHash(hash))
    .some((hash) => hash === PASSWORD_HASH);

  if (hashMatches) {
    return res.status(200).json({
      success: true,
      message: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω'
    });
  } else {
    return res.status(401).json({
      success: false,
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
    });
  }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Å—Ç—è
app.post('/api/guests', async (req, res) => {
  try {
    const {
      guest_phone,
      last_name,
      first_name,
      checkin_date,
      loyalty_level,
      shelter_booking_id,
      total_amount,
      bonus_spent
    } = req.body;

    if (!guest_phone || !last_name || !first_name || !shelter_booking_id || !total_amount) {
      return res.status(400).json({
        success: false,
        message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: —Ç–µ–ª–µ—Ñ–æ–Ω, —Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—É–º–º—É.'
      });
    }

    const normalizedPhoneDigits = String(guest_phone).replace(/\D/g, '');
    if (normalizedPhoneDigits.length < 10) {
      return res.status(400).json({
        success: false,
        message: '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≥–æ—Å—Ç—è.'
      });
    }
    const phoneToStore = normalizedPhoneDigits.slice(-10);

    const lastNameSanitized = String(last_name).trim();
    const firstNameSanitized = String(first_name).trim();
    const bookingSanitized = String(shelter_booking_id).trim();
    const loyaltySanitized = String(loyalty_level || '').trim();
    const normalizedDate = normalizeCheckinDate(checkin_date);

    if (!lastNameSanitized || !firstNameSanitized) {
      return res.status(400).json({
        success: false,
        message: '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.'
      });
    }

    if (lastNameSanitized.length > 120 || firstNameSanitized.length > 120) {
      return res.status(400).json({
        success: false,
        message: '–§–∞–º–∏–ª–∏—è –∏ –∏–º—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ–≤—ã—à–∞—Ç—å 120 —Å–∏–º–≤–æ–ª–æ–≤.'
      });
    }

    if (!bookingSanitized) {
      return res.status(400).json({
        success: false,
        message: '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Shelter.'
      });
    }

    if (bookingSanitized.length > 80) {
      return res.status(400).json({
        success: false,
        message: '–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π.'
      });
    }

    if (!normalizedDate) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.'
      });
    }

    if (Number.isNaN(Date.parse(normalizedDate))) {
      return res.status(400).json({
        success: false,
        message: '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.'
      });
    }

    const amount = Number.parseFloat(total_amount);
    if (!Number.isFinite(amount) || amount <= 0 || amount > 1_000_000) {
      return res.status(400).json({
        success: false,
        message: '–°—É–º–º–∞ –ø—Ä–∏ –≤—ã–µ–∑–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –Ω–µ –±–æ–ª–µ–µ 1 000 000.'
      });
    }

    const bonusValueRaw = Number.parseInt(bonus_spent, 10);
    const bonusValue = Number.isFinite(bonusValueRaw) && bonusValueRaw > 0 ? bonusValueRaw : 0;
    if (bonusValue > 1_000_000) {
      return res.status(400).json({
        success: false,
        message: '–°–ø–∏—Å–∞–Ω–Ω—ã–µ –±–∞–ª–ª—ã –Ω–µ –º–æ–≥—É—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 1 000 000.'
      });
    }

    const query = `
      INSERT INTO guests
      (guest_phone, last_name, first_name, checkin_date, loyalty_level,
       shelter_booking_id, total_amount, bonus_spent)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING *
    `;

    const values = [
      phoneToStore,
      lastNameSanitized,
      firstNameSanitized,
      normalizedDate,
      loyaltySanitized || null,
      bookingSanitized,
      amount,
      bonusValue
    ];

    const result = await pool.query(query, values);

    res.json({
      success: true,
      message: '‚úÖ –î–∞–Ω–Ω—ã–µ –≥–æ—Å—Ç—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!',
      data: result.rows[0]
    });
  } catch (error) {
    if (LOG_LEVEL === 'debug') console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è:', error);
    res.status(500).json({
      success: false,
      message: NODE_ENV === 'development' ? error.message : '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Å—Ç—è'
    });
  }
});

// –ü–æ–∏—Å–∫ –±–æ–Ω—É—Å–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
app.get('/api/bonuses/search', async (req, res) => {
  try {
    const { phone } = req.query;
    if (!phone) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞'
      });
    }
    const digits = String(phone).replace(/\D/g, '');
    if (digits.length < 10) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      });
    }

    const normalizedPhone = digits.slice(-10);

    const result = await pool.query(
      `SELECT
        phone as guest_phone,
        last_name,
        first_name,
        loyalty_level,
        bonus_balances as current_balance,
        visits_total as visits_count,
        last_date_visit as last_visit_date
      FROM bonuses_balance
      WHERE phone = $1
      ORDER BY last_date_visit DESC
      LIMIT 1`,
      [normalizedPhone]
    );

    res.json({
      success: true,
      data: result.rows.length ? result.rows[0] : null
    });
  } catch (error) {
    if (LOG_LEVEL === 'debug') console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Å—Ç—è –≤ bonuses_balance:', error);
    res.status(500).json({
      success: false,
      message: NODE_ENV === 'development' ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Å—Ç—è'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π (–∞–¥–º–∏–Ω)
app.get('/api/guests', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM guests ORDER BY created_at DESC LIMIT 100');
    res.json({
      success: true,
      data: result.rows
    });
  } catch (error) {
    if (LOG_LEVEL === 'debug') console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Å—Ç–µ–π:', error);
    res.status(500).json({
      success: false,
      message: NODE_ENV === 'development' ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Å—Ç–µ–π'
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤ (–∞–¥–º–∏–Ω)
app.get('/api/bonuses', async (req, res) => {
  try {
    const result = await pool.query('SELECT * FROM bonuses_balance ORDER BY last_date_visit DESC LIMIT 100');
    res.json({
      success: true,
      data: result.rows
    });
  } catch (error) {
    if (LOG_LEVEL === 'debug') console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö bonuses_balance:', error);
    res.status(500).json({
      success: false,
      message: NODE_ENV === 'development' ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤'
    });
  }
});

// 404
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    message: 'üö´ –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  if (LOG_LEVEL === 'debug') console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({
    success: false,
    message: NODE_ENV === 'development' ? error.message : '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});

// –ó–∞–ø—É—Å–∫
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ Amvera, –ø–æ—Ä—Ç ${PORT}`);
  console.log(`üìç Health check: /health`);
  console.log(`üìç Allowed origins: ${UNIQUE_ALLOWED_ORIGINS.join(', ')}`);
});
